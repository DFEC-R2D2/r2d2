Looking more into the nrf24l01+ documentation and thinking about it more after a break, I have come to some very important conclusions. 

First, I think my CSN fluctuated resulting in improper reception of SPI instruction. This is because I assumed the CE acted as a CSN when sending instructions out of the Pi MOSI. 
This essentially was the same as sending random instructions (if they were instructions that even worked at all) to the wireless component. I for sure now need to read the setting and status registers to see what
they are set to now. 

Second, I believe I do not have the FULLEST grasp on MISO/MOSI. I am confused about how I plan on sending info while at the same time receive info. This is why I messed with the threading. SPI is full-duplex, but I fail to understand where
the information going to MISO gets stored, so I can look at it after I am done transmitting my signal to make code easier and not deal with threads/multiprocessing if allowable. The practice was great though! 

Last, one of my biggest problems was underestimating how complex this wireless system actually is. I am glad it's so complex because I will continue to try and figure it out, but at the moment (after 10 straight hours of working on it on my practically off day) I am 
pretty mind-numbed. I think I will first learn the sonar sensors with arduino, then connect some type of small intersystem between the microcontrollers. 
I became a little frustrated about how my neatly packaged library for Python seemingly did not work, but my main annoyance was the degree I could troubleshoot. I used spidev (which is recommended for Raspberry Pi and Python), which 
may actually work and I might be able to get it to work in the future after noticing my CSN error (see "First..."), but the problem with Python is the user is expected to assume so much. Spidev does not even have very good official documentation.
Admittedly, I did not look for the source code behind the functions, but I bet they are written in C due to C's capability to alter low-level resistors. Even if I studied the source code, I might as well start writing in C because
I will understand it from a C perspective after that. 

--UPDATE 11/15 -- 
After reading the source code from someone who made a library for this wireless sensor for the BeagleBone (https://github.com/jpbarraca/pynrf24/blob/master/nrf24.py), I realize that I am at least partially wrong in my assumption. 

Right now, I am reading these two websites to better understand how people go about switching register values and go about programming more complicated systems :
1) http://www.diyembedded.com/tutorials/nrf24l01_0/nrf24l01_tutorial_0.pdf
2) http://gizmosnack.blogspot.jp/2013/04/tutorial-nrf24l01-and-avr.html

It looks like a register settings read/write is done by sending a serial command to the sensor to do so. 

