/*
 HC-SR04 Ping distance sensor:
 VCC to arduino 5v 
 GND to arduino GND
 Echo to Arduino pin 7 
 Trig to Arduino pin 8
 
 This sketch originates from Virtualmix: http://goo.gl/kJ8Gl
 Has been modified by Winkle ink here: http://winkleink.blogspot.com.au/2012/05/arduino-hc-sr04-ultrasonic-distance.html
 And modified further by ScottC here: http://arduinobasics.blogspot.com.au/2012/11/arduinobasics-hc-sr04-ultrasonic-sensor.html
 on 10 Nov 2012.
 */

// Tweaked by Matt Grimm
#define echoPin 7 // Echo Pin
#define trigPin 8 // Trigger Pin
#define LEDPin 13 // Onboard LED (EDIT: this variable represents the signal to the MicroView, I just didn't bother changing the name.) 

int maximumRange = 50; // Maximum range needed. This part is really important for sensitivity purposes.
int minimumRange = 0; // Minimum range needed
long duration, distance; // Duration used to calculate distance
uint8_t newDet;
int maArray[11] = {0,0,0,0,0,0,0,0,0,0,0};

void setup() {
 Serial.begin (9600);
 pinMode(trigPin, OUTPUT);
 pinMode(echoPin, INPUT);
 pinMode(LEDPin, OUTPUT); // Use LED indicator (if required)
}

void loop() {
/* The following trigPin/echoPin cycle is used to determine the
 distance of the nearest object by bouncing soundwaves off of it. */ 
 digitalWrite(trigPin, LOW); 
 delayMicroseconds(2); 

 digitalWrite(trigPin, HIGH);
 delayMicroseconds(10); 
 
 digitalWrite(trigPin, LOW);
 duration = pulseIn(echoPin, HIGH);
 
 //Calculate the distance (in cm) based on the speed of sound.
 distance = duration/58.2;
 
 if (distance >= maximumRange || distance <= minimumRange){
    newDet=0; // don't mix the newDet values up, or else results won't make sense. 
 }
 else{
    newDet=1;
  }
  uint8_t realVal = updateMovingAv(newDet,maArray);
 /* Send a negative number to computer and Turn LED ON 
 to indicate "out of range" */
 if(!realVal){
   Serial.print("-1");
   digitalWrite(LEDPin, LOW); // LED Pin is just hooked up to input of MicroView
   Serial.println(digitalRead(LEDPin));
 }
 else {
 /* Send the distance to the computer using Serial protocol, and
 turn LED OFF to indicate successful reading. */
   Serial.print(distance);
   digitalWrite(LEDPin, HIGH); 
   Serial.println(digitalRead(LEDPin));
 }
 
 //Delay 10ms before next reading.
 delay(10);
}

uint8_t updateMovingAv(uint8_t newV,int *maArray){
  // Shift everything down one.
  for(int i=0;i<11;i++){
    maArray[i+1] = maArray[i];
    }
  // Add new Val
  maArray[0] = newV;
  // Calculate if 1 or 0
  int counter = 0;
  for(int y = 0; y<12;y++){
    if(maArray[y]){
      counter++;
    }
  }

  // For less blinking sensitivity (because if the values alternate on an edge of the moving average, then readings will still blink),
  // I could have the value change at the extremes (<3 or >7) and stay the same as previous value if the number of same readings is in the middle.
  if(counter>=6){
    return 1;
  }
  else{
    return 0;
  }
}
